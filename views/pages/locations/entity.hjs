{{<layout}}
{{$content}}

<div class="container-fluid">
    <h1>Location entity</h1>
</div>

<div class="container-fluid topBar">
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 btn-group" role="group" aria-label="save location buttons">
            <button type="button" class="btn btn-success" data-bind="click: saveLocation, enable: isFormValid">Save</button>
            <a href="/locations/list" class="btn btn-default">Cancel</a>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <div class="form-group" data-bind="css: { 'has-error': !isTitleValid() }">
                <label class="control-label" for="locationTitle">Location Title</label>
                <input type="text" class="form-control" id="locationTitle" placeholder="Title" data-bind="textInput: Title">
            </div>
            <div class="form-group" data-bind="css: { 'has-error': !isAddressValid() }">
                <label class="control-label" for="locationAddress">Location Address</label>
                <input type="text" class="form-control" id="locationAddress" placeholder="Location Address" data-bind="textInput: Address">
            </div>
            <div class="form-group">
                <label class="control-label" for="locationAddressAdditionalDirections">Location Address Additional Directions</label>
                <input type="text" class="form-control" id="locationAddressAdditionalDirections" placeholder="Location Address Additional Directions" data-bind="textInput: AdditionalDirections">
                <!--<label for="locationAddressLatitude">Location Address Latitude</label>-->
                <!--<label for="locationAddressLongitude">Location Address Longitude</label>-->
            </div>
        </div>
    </div>
</div>

<script>
    o().config({
        endpoint: window.configuration.ODataApiEndpoint
    });

    var viewModel = {
        Id: ko.observable(Guid.raw()),
        Title: ko.observable(''),
        Address: ko.observable(''),
        AdditionalDirections: ko.observable(''),
        Latitude: ko.observable(0),
        Longitude: ko.observable(0),

        isEditMode: false,

        getLocation: function() {
            var uri = new URI(window.location.search);
            var query = uri.query(true);

            var currentLocationId = query.id;
            viewModel.isEditMode = !!currentLocationId;
            if (!viewModel.isEditMode) {
                return;
            }

            var table = o('Locations');
            table.find(currentLocationId).get()
                .then(function(response) {
                    var entity = response.data;

                    viewModel.Id(entity.Id);
                    viewModel.Title(entity.Title);
                    viewModel.Address(entity.Address);
                    viewModel.AdditionalDirections(entity.AdditionalDirections);
                    viewModel.Latitude(entity.Latitude);
                    viewModel.Longitude(entity.Longitude);
                })
        },
        saveLocation: function() {
            var entity = {
                Id: viewModel.Id(),
                Title: viewModel.Title(),
                Address: viewModel.Address(),
                AdditionalDirections: viewModel.AdditionalDirections(),
                Latitude: viewModel.Latitude(),
                Longitude: viewModel.Longitude()
            };

            var table = o('Locations');

            if (viewModel.isEditMode) {
                table.find(entity.Id).patch(entity).save()
                    .then(function(){
                        viewModel.redirectToList();
                    });
            } else {
                table.post(entity).save()
                    .then(function(){
                        viewModel.redirectToList();
                    });
            }
        },
        redirectToList: function() {
            window.location.href = '/locations/list';
        }
    };

    viewModel.isTitleValid = ko.computed(function(){
        return !!viewModel.Title();
    });

    viewModel.isAddressValid = ko.computed(function(){
        return !!viewModel.Address();
    });

    viewModel.isFormValid = ko.computed(function() {
        return viewModel.isTitleValid() && viewModel.isAddressValid();
    });


    viewModel.getLocation();

    ko.applyBindings(viewModel);

</script>

{{/content}}
{{/layout}}