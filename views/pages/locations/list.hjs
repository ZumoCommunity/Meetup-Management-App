{{<layout}}
{{$content}}

<div class="container-fluid">
    <h1>Locations list</h1>
</div>

<div class="container-fluid locationsTopBar">
    <div class="row">
        <div class="col-xs-12 btn-group" role="group" aria-label="create location buttons">
            <a href="/locations/entity" class="btn btn-success">Create new location</a>
            <button type="button" class="btn btn-default" data-bind="click: refreshLocationsPage">Refresh</button>
        </div>
    </div>
</div>

<div class="container-fluid locationsListContainer">
    <div class="row locationListHeader">
        <div class="col-xs-4">
            Title
        </div>
        <div class="col-xs-4">
            Address
        </div>
        <div class="col-xs-4">
            &nbsp;
        </div>
    </div>
    <div data-bind="visible: !isLocationsLoaded()">
        Please wait...
    </div>
    <div data-bind="foreach: locations, visible: isLocationsLoaded()">
        <div class="row locationListRow">
            <div class="col-xs-4" data-bind="text: Title">
            </div>
            <div class="col-xs-4" data-bind="text: Address">
            </div>
            <div class="col-xs-4 btn-group" role="group" aria-label="location buttons">
                <a class="btn btn-warning" data-bind="attr: { href: '/locations/entity?id=' + Id }">Edit</a>
                <button type="button" class="btn btn-danger" data-bind="click: $parent.deleteLocation">Delete</button>
                <a class="btn btn-success">Create a Meetup</a>
                <a class="btn btn-default">Show Meetups</a>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <nav aria-label="Page navigation">
                <ul class="pagination" data-bind="foreach: totalPagesArray">
                    <li data-bind="css: { 'active': $parent.pageIsActive($data) }">
                        <a href="#" data-bind="click: $parent.navigateToItemPage"><span data-bind="text: $data"></span></a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<script>
    o().config({
        endpoint: window.configuration.ODataApiEndpoint
    });

    var viewModel = {
        locations: ko.observableArray([]),

        isLocationsLoaded: ko.observable(true),
        pageSize: 3,
        currentPage: ko.observable(1),
        totalPages: ko.observable(0),

        totalPagesArray: ko.observableArray([]),

        getLocationsPage: function(pageNumber){
            viewModel.isLocationsLoaded(false);

            viewModel.currentPage(pageNumber);

            var itemsToSkip = (viewModel.currentPage() - 1) * viewModel.pageSize;

            var table = o('Locations');
            table.top(viewModel.pageSize).skip(itemsToSkip).orderBy('Title').inlineCount('true').get()
                .then(function(response) {
                    viewModel.locations.removeAll();

                    var totalPages = Math.ceil(response.inlinecount / viewModel.pageSize) || 1;

                    viewModel.totalPages(totalPages);

                    viewModel.populateTotalPagesArray(viewModel.totalPages());

                    var entities = response.data;
                    entities.forEach(function(location){
                        viewModel.locations.push(location);
                    });

                    viewModel.isLocationsLoaded(true);
                });
        },

        refreshLocationsPage: function() {
            viewModel.getLocationsPage(viewModel.currentPage());
        },

        populateTotalPagesArray: function (totalPages) {
            viewModel.totalPagesArray.removeAll();

            var i = 1;
            for (i; i <= totalPages; i++) {
                viewModel.totalPagesArray.push(i);
            }
        },

        navigateToItemPage: function (page) {
            viewModel.getLocationsPage(page);
        },

        pageIsActive: function (pageLink) {
            if (pageLink == viewModel.currentPage()) {
                return true;
            }
            else {
                return false;
            }
        },

        deleteLocation: function(location) {
            if (!confirm('Delete location ' + location.Title + '?')) {
                return;
            }

            viewModel.isLocationsLoaded(false);
            var table = o('Locations');
            table.find(location.Id).remove().save()
                .then(function() {
                    viewModel.getLocationsPage(viewModel.currentPage());
                });
        }
    };

    viewModel.getLocationsPage(viewModel.currentPage());


    ko.applyBindings(viewModel);
</script>

{{/content}}
{{/layout}}